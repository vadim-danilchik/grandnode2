@inject IWorkContext workContext
@inject IPageHeadBuilder pagebuilder

@model Checkout.OnePage.Models.OnePageCheckoutModel
@{
    Layout = "_SingleColumn";

    <link rel="stylesheet" type="text/css" asp-src="../Themes/eShop/Content/css/cart/cart.css">

    var storeLocation = workContext.CurrentStore.SslEnabled ? workContext.CurrentStore.SecureUrl.TrimEnd('/') : workContext.CurrentStore.Url.TrimEnd('/');

    //title
    pagebuilder.AddTitleParts(Loc["Title.Checkout"]);
}
<div class="page checkout-page">
    <h1 class="generalTitle h2 my-3">@Loc["Checkout"]</h1>
    @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_content_before" })
    <div class="col-12 px-0">
        <div class="form-row">
            <div class="col-xl-8 col-12">
                <template>
                    <div class="form-row">
                        <div class="col-6" id="checkout-steps">
                            @if (Model.ShippingRequired)
                            {
                                <div class="card">
                                    <div class="card-header">
                                        <button block id="button-shipping" class="btn btn-info">@Loc["Checkout.ShippingAddress"]</button>
                                    </div>
                                    <div class="card-body">
                                        <form action="" id="co-shipping-form">
                                            <div id="checkout-shipping-load">
                                                <partial name="_OnePageCheckoutShippingAddress" model="Model.ShippingAddress" />
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            }
                            <div class="card">
                                <div class="card-header" role="tab">
                                    <button block id="button-payment-info" class="btn btn-info">@Loc["Checkout.PaymentInfo"]</button>
                                </div>
                                <div class="card-body">
                                    <form action="" id="co-payment-info-form">
                                        <div id="checkout-payment-info-load">
                                            @*In that field payment info section will be loaded*@
                                            <partial name="_OnePageCheckoutPaymentInfo" />
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            @if (Model.ShippingRequired)
                            {
                                <div class="card">
                                    <div class="card-header">
                                        <button block id="button-shipping-method" class="btn btn-info">@Loc["Checkout.ShippingMethod"]</button>
                                    </div>
                                    <div class="card-body">
                                        <form id="co-shipping-method-form" action="">
                                            <div id="checkout-shipping-method-load">
                                                @*In that field all available shipping methods will be loaded*@
                                                <partial name="_OnePageCheckoutShippingMethods" model="Model.ShippingAddress" />
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            }
                            <div class="card">
                                <div class="card-header" role="tab">
                                    <button block id="button-payment-method" class="btn btn-info">@Loc["Checkout.PaymentMethod"]</button>
                                </div>
                                <div class="card-body">
                                    <form action="" id="co-payment-method-form">
                                        <div id="checkout-payment-method-load">
                                            @*In that field all available payment methods will be loaded*@
                                            <partial name="_OnePageCheckoutPaymentMethods" model="Model" />
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-12 buttons py-1 mt-3 px-0" id="confirm-order-buttons-container">
                            <input type="button" class="btn btn-info confirm-order-next-step-button" @@click="validateBeforeClick($event); vmorder.setDisabled(event)" onclick="vmorder.Checkout.save()" value="@Loc["Common.Confirm"]" />
                        </div>                        
                    </div>
                </template>
            </div>
            <div class="col-xl-4 col-12">
                <div class="opc-totals">
                    <partial name="_OnePageCheckoutSummary" />
                </div>
            </div>
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_content_after" })
</div>
<script asp-location="Header">
    var Order = Vue.extend({
        props: {
            Model: null,
            cart: null,
            totals: null,
            checkoutAsGuest: false,
            // shipping address
            ShippingAllowPickUpInStore: null,
            ShippingExistingAddresses: null,
            ShippingNewAddress: null,
            ShippingNewAddressPreselected: null,
            ShippingPickUpInStore: null,
            ShippingPickUpInStoreOnly: null,
            ShippingPickupPoints: null,
            ShippingWarnings: null,
            ShippingMethodError: null,
            // shipping method
            ShippingMethods: null,
            ShippingMethodWarnings: null,
            // payment methods
            DisplayLoyaltyPoints: null,
            PaymentMethods: null,
            LoyaltyPointsAmount: null,
            LoyaltyPointsBalance: null,
            LoyaltyPointsEnoughToPayForOrder: null,
            UseLoyaltyPoints: null,
            // payment info
            PaymentViewComponentName: null,
            // confirm order
            MinOrderTotalWarning: null,
            TermsOfServiceOnOrderConfirmPage: null,
            ConfirmWarnings: null,
            // terms of service
            terms: false,
            acceptTerms: false,
            // checkout steps methods
            Checkout: null,
            vPaymentInfo: null,
            vConfirmOrder: null,
            // paymentinfobussy
            paymentBussy: false,
            // shippingbussy
            shippingBussy: false,
            // selectedshipping
            selectedShippingMethod: 0,
            // selectedpayment
            selectedPaymentMethod: 0
    },
    mounted() {
        this.Model = @Json.Serialize(Model);
        this.vmCheckout();
        //this.vmPaymentInfo();
        //this.vmConfirmOrder();
        this.updateCart();
        this.updateTotals();
        this.cartView();
        this.otherScripts();
    },
    methods: {
        setDisabled(e) {
            var button = e.target;
            button.classList.add('disabled');
            setTimeout(function () {
                button.classList.remove('disabled');
            }, 600);
        },
        vmCheckout() {
            this.Checkout = {
                loadWaiting: false,
                failureUrl: false,
                shippingForm: false,
                shippingMethodForm: false,
                paymentMethodForm: false,
                paymentMethodUrl: false,
                saveUrl: false,
                successUrl: false,
                isSuccess: false,

                init: function () {
                    this.loadWaiting = false;
                    this.failureUrl = '/cart/';
                    this.shippingForm = '#co-shipping-form';
                    this.shippingMethodForm = '#co-shipping-method-form';
                    this.paymentMethodForm = '#co-payment-method-form';
                    this.paymentInfoForm = '#co-payment-info-form';
                    this.paymentMethodUrl = '/checkout/SelectPaymentMethod/';
                    this.saveUrl = '/checkout/ConfirmOrder/';
                    this.successUrl = '/checkout/completed/';

                    vmorder.ShippingAllowPickUpInStore = vmorder.Model.ShippingAddress.AllowPickUpInStore;
                    vmorder.ShippingExistingAddresses = vmorder.Model.ShippingAddress.ExistingAddresses;
                    vmorder.ShippingNewAddress = vmorder.Model.ShippingAddress.NewAddress;
                    vmorder.ShippingNewAddressPreselected = vmorder.Model.ShippingAddress.NewAddressPreselected;
                    vmorder.ShippingPickUpInStore = vmorder.Model.ShippingAddress.PickUpInStore;
                    vmorder.ShippingPickUpInStoreOnly = vmorder.Model.ShippingAddress.PickUpInStoreOnly;
                    vmorder.ShippingPickupPoints = vmorder.Model.ShippingAddress.PickupPoints;
                    vmorder.ShippingWarnings = vmorder.Model.ShippingAddress.Warnings;

                    vmorder.ShippingMethods = vmorder.Model.ShippingMethod.ShippingMethods;
                    vmorder.ShippingMethodWarnings = vmorder.Model.ShippingMethod.Warnings;
                    if (vmorder.ShippingMethods.length > 0) {
                        var index;
                        if (vmorder.selectedShippingMethod !== undefined) {
                            index = vmorder.selectedShippingMethod;
                        } else {
                            index = 0;
                        }
                        var elem = vmorder.ShippingMethods[index].Name + '___' + vmorder.ShippingMethods[index].ShippingRateProviderSystemName;
                        vmorder.loadPartialView(elem);
                    }
                    vmorder.updateTotals();

                    vmorder.DisplayLoyaltyPoints = vmorder.Model.PaymentMethod.DisplayLoyaltyPoints;
                    vmorder.PaymentMethods = vmorder.Model.PaymentMethod.PaymentMethods;
                    vmorder.LoyaltyPointsAmount = vmorder.Model.PaymentMethod.LoyaltyPointsAmount;
                    vmorder.LoyaltyPointsBalance = vmorder.Model.PaymentMethod.LoyaltyPointsBalance;
                    vmorder.LoyaltyPointsEnoughToPayForOrder = vmorder.Model.PaymentMethod.LoyaltyPointsEnoughToPayForOrder;
                    vmorder.UseLoyaltyPoints = vmorder.Model.PaymentMethod.UseLoyaltyPoints;
                    if (vmorder.PaymentMethods.length > 0) {
                        var index;
                        if (vmorder.selectedPaymentMethod !== undefined) {
                            index = vmorder.selectedPaymentMethod;
                        } else {
                            index = 0;
                        }
                        vmorder.loadPaymentInfoPartialView(vmorder.PaymentMethods[index].PaymentViewComponentName);
                    }
                },

                axiosFailure: function () {
                    location = vmorder.Checkout.failureUrl;
                },

                _disableEnableAll: function (element, isDisabled) {
                    var descendants = element.querySelectorAll('*');
                    descendants.forEach(function (d) {
                        if (isDisabled) {
                            d.setAttribute('disabled', 'disabled');
                        } else {
                            d.removeAttribute('disabled');
                        }
                    });

                    if (isDisabled) {
                        element.setAttribute('disabled', 'disabled');
                    } else {
                        element.removeAttribute('disabled');
                    }
                },

                setLoadWaiting: function (step, keepDisabled) {
                    if (step) {
                        if (this.loadWaiting) {
                            this.setLoadWaiting(false);
                        }
                        var container = document.querySelector('#' + step + '-buttons-container');
                        container.classList.add('disabled');
                        container.style.opacity = '0.5';
                        this._disableEnableAll(container, true);
                        document.querySelector('#' + step + '-please-wait').style.display = 'block';
                    } else {
                        if (this.loadWaiting) {
                            var container = document.querySelector('#' + this.loadWaiting + '-buttons-container');
                            var isDisabled = (keepDisabled ? true : false);
                            if (!isDisabled) {
                                container.classList.remove('disabled');
                                container.style.opacity = '1';
                            }
                            this._disableEnableAll(container, isDisabled);
                            document.querySelector('#' + this.loadWaiting + '-please-wait').style.display = 'none';
                        }
                    }
                    this.loadWaiting = step;
                },

                setStepResponse: function (response) {

                    if (response.data.update_section.name) {
                        if (response.data.goto_section == "shipping") {
                            var model = response.data.update_section.model;
                            vmorder.ShippingAllowPickUpInStore = model.AllowPickUpInStore;
                            vmorder.ShippingPickUpInStore = model.PickUpInStore;
                            vmorder.ShippingPickUpInStoreOnly = model.PickUpInStoreOnly;
                            vmorder.ShippingPickupPoints = model.PickupPoints;
                            vmorder.ShippingExistingAddresses = model.ExistingAddresses;
                            vmorder.ShippingNewAddress = model.NewAddress;
                            vmorder.ShippingNewAddressPreselected = model.NewAddressPreselected;
                            vmorder.ShippingWarnings = model.Warnings;
                            vmorder.ShippingAddress = true;
                        }
                        if (response.data.goto_section == "shipping_method") {
                            var model = response.data.update_section.model;
                            vmorder.ShippingMethods = model.ShippingMethods;
                            vmorder.ShippingMethodWarnings = model.Warnings;
                            vmorder.ShippingMethod = true;
                            if (model.ShippingMethods.length > 0) {
                                var index;
                                if (vmorder.selectedShippingMethod !== undefined) {
                                    index = vmorder.selectedShippingMethod;
                                } else {
                                    index = 0;
                                }
                                var elem = model.ShippingMethods[index].Name + '___' + model.ShippingMethods[index].ShippingRateProviderSystemName;
                                vmorder.loadPartialView(elem);
                            }
                            vmorder.updateTotals();
                        }
                        if (response.data.goto_section == "payment_method") {
                            var model = response.data.update_section.model;
                            vmorder.DisplayLoyaltyPoints = model.DisplayLoyaltyPoints;
                            vmorder.PaymentMethods = model.PaymentMethods;
                            vmorder.LoyaltyPointsAmount = model.LoyaltyPointsAmount;
                            vmorder.LoyaltyPointsBalance = model.LoyaltyPointsBalance;
                            vmorder.LoyaltyPointsEnoughToPayForOrder = model.LoyaltyPointsEnoughToPayForOrder;
                            vmorder.UseLoyaltyPoints = model.UseLoyaltyPoints;
                            vmorder.PaymentMethod = true;

                            vmorder.updateTotals();

                        }
                        if (response.data.goto_section == "payment_info") {
                            var model = response.data.update_section.model;
                            vmorder.PaymentViewComponentName = model.PaymentViewComponentName;
                            vmorder.PaymentInfo = true;
                            vmorder.paymentBussy = true;
                            axios({
                                baseURL: '/Component/Index?Name=' + model.PaymentViewComponentName,
                                method: 'get',
                                data: null,
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json',
                                }
                            }).then(response => {
                                vmorder.paymentBussy = false;
                                var html = response.data;
                                document.querySelector('.payment-info .info').innerHTML = html;
                            }).then(function () {
                                if (document.querySelector('.script-tag-info')) {
                                    runScripts(document.querySelector('.script-tag-info'))
                                }
                            });

                            this.updateOrderSummary(false);
                            vmorder.updateTotals();

                        }
                        if (response.data.goto_section == "confirm_order") {
                            var model = response.data.update_section.model;
                            vmorder.MinOrderTotalWarning = model.MinOrderTotalWarning;
                            vmorder.ConfirmWarnings = model.Warnings;

                            vmorder.Confirm = true;

                            setTimeout(function () {
                                var c_back = document.getElementById('back-confirm_order').getAttribute('onclick');
                                document.getElementById('new-back-confirm_order').setAttribute('onclick', c_back);
                            }, 300);

                            this.updateOrderSummary(true);
                            vmorder.updateTotals();
                        }

                        if (!response.data.wrong_billing_address) {
                            if (!(document.querySelector("#opc-confirm-order").classList.contains('show'))) {
                                vm.$root.$emit('bv::toggle::collapse', 'opc-' + response.data.update_section.name)
                                vmorder.vmresetSteps(document.querySelector('#opc-' + response.data.update_section.name));
                            }
                        }
                    }
                    if (response.data.allow_sections) {
                        response.data.allow_sections.forEach(function (e) {
                            document.querySelector('#button-' + e).classList.add('allow');
                        });
                    }

                    if (document.querySelector("#shipping-address-select")) {
                        vmorder.Checkout.newAddress(!document.querySelector('#shipping-address-select').value);
                    }
                    if (response.data.redirect) {
                        location.href = response.data.redirect;
                        return true;
                    }
                    return false;
                },
                updateOrderSummary: function (displayOrderReviewData) {
                    axios({
                        baseURL: '/Component/Index?Name=OrderSummary',
                        method: 'post',
                        data: {
                            prepareAndDisplayOrderReviewData: displayOrderReviewData,
                        },
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'X-Response-View': 'Json'
                        }
                    }).then(response => {
                        vmorder.cart.OrderReviewData = response.data.OrderReviewData
                    });
                },

                save: function () {
                    if (vmorder.Checkout.loadWaiting != false) return;
                    vmorder.Checkout.setLoadWaiting('confirm-order');

                    if (this.validateShippingMethods() && this.validatePaymentMethods()) {
                        var form = document.querySelector(this.form);
                        var data = new FormData(form);
                        axios({
                            url: this.saveUrl,
                            method: 'post',
                            data: data,
                        }).then(function (response) {
                            if (response.data.goto_section !== undefined) {
                                vmorder.Checkout.nextStep(response);
                            }
                        }).catch(function (error) {
                            error.axiosFailure;
                        }).then(function () {
                            vmorder.Checkout.setLoadWaiting(false);
                        });
                    }
                },

                nextStep: function (response) {
                    if (response.data.error) {
                        if ((typeof response.data.message) == 'string') {
                            alert(response.data.message);
                        } else {
                            alert(response.data.message.join("\n"));
                        }

                        return false;
                    }

                    if (response.data.redirect) {
                        this.isSuccess = true;
                        location.href = response.data.redirect;
                        return;
                    }
                    if (response.data.success) {
                        this.isSuccess = true;
                        window.location = this.successUrl;
                    }
                    vmorder.Checkout.setStepResponse(response);
                },

                newAddress: function (isNew) {
                    if (isNew) {
                        this.resetSelectedAddress();
                        document.querySelector('#shipping-new-address-form').style.display = 'block';
                    } else {
                        document.querySelector('#shipping-new-address-form').style.display = 'none';
                    }
                },

                resetSelectedAddress: function () {
                    var selectElement = document.querySelector('#shipping-address-select');
                    if (selectElement) {
                        selectElement.value = '';
                    }
                },
                
                validateShippingMethods: function () {
                    var methods = document.getElementsByName('shippingoption');
                    if (methods.length == 0) {
                        alert('Your order cannot be completed at this time as there is no shipping methods available for it. Please make necessary changes in your shipping address.');
                        return false;
                    }

                    for (var i = 0; i < methods.length; i++) {
                        if (methods[i].checked) {
                            return true;
                        }
                    }
                    alert('Please specify shipping method.');
                    return false;
                },

                validatePaymentMethods: function () {
                    var methods = document.getElementsByName('paymentmethod');
                    if (methods.length == 0) {
                        alert('Your order cannot be completed at this time as there is no payment methods available for it.');
                        return false;
                    }

                    for (var i = 0; i < methods.length; i++) {
                        if (methods[i].checked) {
                            return true;
                        }
                    }
                    alert('Please specify payment method.');
                    return false;
                },

                toggleUseLoyaltyPoints: function (useLoyaltyPointsInput) {
                    if (useLoyaltyPointsInput.checked) {
                        document.querySelector('#payment-method-block').style.display = 'none';
                    }
                    else {
                        document.querySelector('#payment-method-block').style.display = 'block';
                    }
                },

                selectPayment: function () {
                    if (this.validatePaymentMethods()) {
                        var form = document.querySelector(this.paymentMethodForm);
                        var data = new FormData(form);
                        axios({
                            url: this.paymentMethodUrl,
                            method: 'post',
                            data: data,
                        }).then(function (response) {
                            if (response.data.goto_section !== undefined) {
                                if (response.data.error) {
                                    if ((typeof response.data.message) == 'string') {
                                        alert(response.data.message);
                                    } else {
                                        alert(response.data.message.join("\n"));
                                    }
                                    return false;
                                }

                                if (response.data.goto_section == "payment_info") {
                                    var model = response.data.update_section.model;
                                    vmorder.PaymentViewComponentName = model.PaymentViewComponentName;
                                    vmorder.paymentBussy = true;

                                    vmorder.loadPaymentInfoPartialView(model.PaymentViewComponentName);

                                    this.updateOrderSummary(false);
                                    vmorder.updateTotals();
                                }
                            }
                            if (response.data.error) {
                                alert(response.data.message);
                            }
                        }).catch(function (error) {
                            error.axiosFailure;
                        });
                    }
                }
            };
        },
        vmPaymentInfo() {
            this.vPaymentInfo = {
                form: false,
                saveUrl: false,

                init: function (form, saveUrl) {
                    this.form = form;
                    this.saveUrl = saveUrl;
                },

                save: function () {
                    if (vmorder.Checkout.loadWaiting != false) return;

                    vmorder.Checkout.setLoadWaiting('payment-info');
                    var form = document.querySelector(this.form);
                    var data = new FormData(form);

                    axios({
                        url: this.saveUrl,
                        method: 'post',
                        data: data,
                    }).then(function (response) {
                        if (response.data.goto_section !== undefined) {
                            vmorder.vPaymentInfo.nextStep(response);
                        }
                        if (response.data.update_section !== undefined && response.data.update_section.name == 'payment-info') {
                            var model = response.data.update_section.model;
                            vm.PaymentViewComponentName = model.PaymentViewComponentName,
                                vm.PaymentInfo = true;

                            axios({
                                baseURL: '/Component/Form?Name=' + model.PaymentViewComponentName,
                                method: 'post',
                                data: data,
                            }).then(response => {
                                var html = response.data;
                                document.querySelector('.payment-info .info').innerHTML = html;
                            })

                        }

                    }).catch(function (error) {
                        error.axiosFailure;
                    }).then(function () {
                        vmorder.vPaymentInfo.resetLoadWaiting()
                    });
                },

                resetLoadWaiting: function () {
                    vmorder.Checkout.setLoadWaiting(false);
                },

                nextStep: function (response) {
                    if (response.data.error) {
                        if ((typeof response.data.message) == 'string') {
                            alert(response.data.message);
                        } else {
                            alert(response.data.message.join("\n"));
                        }

                        return false;
                    }

                    vmorder.Checkout.setStepResponse(response);
                }
            };
        },
        vmConfirmOrder() {
            this.vConfirmOrder = {
                form: false,
                saveUrl: false,
                isSuccess: false,

                init: function (saveUrl, successUrl) {
                    this.saveUrl = saveUrl;
                    this.successUrl = successUrl;
                },

                save: function () {
                    if (vmorder.Checkout.loadWaiting != false) return;

                    // terms of service
                    var termOfServiceOk = true;
                    if (termOfServiceOk) {
                        vmorder.Checkout.setLoadWaiting('confirm-order');
                        axios({
                            url: this.saveUrl,
                            method: 'post',
                        }).then(function (response) {
                            vmorder.vConfirmOrder.nextStep(response);
                        }).catch(function (error) {
                            error.axiosFailure;
                        }).then(function () {
                            vmorder.vConfirmOrder.resetLoadWaiting()
                        });
                    } else {
                        return false;
                    }
                },

                resetLoadWaiting: function (transport) {
                    vmorder.Checkout.setLoadWaiting(false, vmorder.vConfirmOrder.isSuccess);
                },

                nextStep: function (response) {
                    if (response.data.error) {
                        if ((typeof response.data.message) == 'string') {
                            alert(response.data.message);
                        } else {
                            alert(response.data.message.join("\n"));
                        }

                        return false;
                    }

                    if (response.data.redirect) {
                        vmorder.vConfirmOrder.isSuccess = true;
                        location.href = response.data.redirect;
                        return;
                    }
                    if (response.data.success) {
                        vmorder.vConfirmOrder.isSuccess = true;
                        window.location = vmorder.vConfirmOrder.successUrl;
                    }
                    vmorder.Checkout.setStepResponse(response);
                }
            };
        },
        cartView() {
            document.addEventListener("DOMContentLoaded", function () {
                var body = document.body;
                body.classList.add("cart-view");
            });
        },
        updateCart() {
            axios({
                baseURL: '/Component/Index?Name=OrderSummary',
                method: 'get',
                data: null,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Response-View': 'Json'
                }
            }).then(response => {
                this.cart = response.data;
            })
        },
        updateTotals() {
            axios({
                baseURL: '/Component/Index?Name=OrderTotals',
                method: 'get',
                data: null,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Response-View': 'Json'
                }
            }).then(response => {
                this.totals = response.data;
            });
        },
        termsCheck() {
            if (vmorder.cart.MinOrderSubtotalWarning == null) {
                if (this.terms) {
                    vmorder.Checkout.save();
                    vmorder.acceptTerms = false;
                }
                else {
                    vmorder.acceptTerms = true;
                }
            }
        },
        otherScripts() {
            document.addEventListener("DOMContentLoaded", function () {
                if (document.querySelector("#shipping-address-select")) {
                    vmorder.Checkout.newAddress(!document.querySelector('#shipping-address-select').value);
                }
            });
        },
        vmresetSteps(e) {
            var getClosest = function (elem, selector) {
                for (; elem && elem !== document; elem = elem.parentNode) {
                    if (elem.matches(selector)) return elem;
                }
                return null;
            };
            var card = getClosest(e, '.card');
            document.querySelectorAll('.opc > .card').forEach(function (e) { e.classList.remove('active'); });
            card.classList.add('active');
        },
        loadPartialView(arg_value) {
            vmorder.shippingBussy = true;
            var url = window.location.origin + '/checkout/GetShippingFormPartialView?shippingOption=' + arg_value;
            axios({
                url: url,
                method: 'post',
            }).then(function (response) {
                vmorder.shippingBussy = false;
                document.getElementById('shipping_form').innerHTML = response.data;
            }).then(function () {
                if (document.querySelector('.script-tag')) {
                    runScripts(document.querySelector('.script-tag'))
                }
            });
        },
        loadPaymentInfoPartialView(arg_value) {
            axios({
                baseURL: '/Component/Index?Name=' + arg_value,
                method: 'get',
                data: null,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                vmorder.paymentBussy = false;
                var html = response.data;
                document.querySelector('.payment-info .info').innerHTML = html;
            }).then(function () {
                if (document.querySelector('.script-tag-info')) {
                    runScripts(document.querySelector('.script-tag-info'))
                }
            });
        }
    },
    watch: {
        terms: function () {
            if (this.terms == true) {
                this.acceptTerms = false;
            }
        },
        Checkout: function () {
            if (this.Checkout !== null) {
                vmorder.Checkout.init();
                if (document.querySelector("#shipping-address-select")) {
                    vmorder.Checkout.newAddress(!document.querySelector('#shipping-address-select').value);
                }
            }
        }
    }
});
var vmorder = new Order().$mount('#ordersummarypagecart')
</script>