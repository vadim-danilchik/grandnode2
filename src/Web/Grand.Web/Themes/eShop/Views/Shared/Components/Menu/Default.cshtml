@model MenuModel
@await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })
<li><hr class="dropdown-divider top"></li>
@if (Model.DisplayHomePageMenu)
{
    <li class="home-link">
        <a href="@Url.RouteUrl("HomePage")">
            <span class="title">@Loc["HomePage"]</span>
        </a>
    </li>
}
@{
    var rootCategories = Model.Categories.ToList();
}
@*@foreach (var category in rootCategories)
{
    var categoryLineModel = new MenuModel.CategoryLineModel
    {
        Category = category
    };
    <partial name="_CategoryLine.Menu" model="categoryLineModel" />
}*@
@if (Model.Categories.Any())
{
    <li class="category -hasSubmenu">
        <a href="#">
            <span class="title">@Loc["Categories.Menu"]</span>
        </a>
        <ul class="gallery size- columns-">
            @foreach (var category in rootCategories)
            {
                <li class="category -hasSubmenu">
                    <a href="@Url.RouteUrl("Category", new { SeName = category.SeName })">
                        <span>@category.Name</span>
                        @if (!string.IsNullOrEmpty(category.Icon))
                        {
                            <span class="category-icon @category.Icon"></span>
                        }
                    </a>
                    <ul class="sublist next-level">
                        @foreach (var subCategory in category.SubCategories)
                        {
                            <li class="category">
                                <a href="@Url.RouteUrl("Category", new { SeName = subCategory.SeName })">
                                    <span>@subCategory.Name</span>
                                </a>
                            </li>
                        }
                    </ul>
                </li>
            }
        </ul>
        <span class="go-back"></span>
        <span class="go-forward"></span>
    </li>
}
@if (Model.Collections.Any())
{
    <li class="-hasSubmenu">
        <a href="@Url.RouteUrl("CollectionList")">
            <span class="title">@Loc["Collections.Menu"]</span>
        </a>
        <ul class="">
            @foreach (var collect in Model.Collections)
            {
                <li>
                    <a href="@Url.RouteUrl("Collection", new { SeName = collect.SeName })">
                        <span class="title">@collect.Name</span>
                        @if (!string.IsNullOrEmpty(collect.Icon))
                        {
                            <span class="category-icon @collect.Icon"></span>
                        }
                    </a>
                </li>
            }
        </ul>
        <span class="go-back"></span>
        <span class="go-forward"></span>
    </li>
}
<li><hr class="dropdown-divider"></li>
@foreach (var mpage in Model.Pages)
{
    <li class="">
        <a href="@Url.RouteUrl("Page", new { SeName=mpage.SeName })">
            <span class="title">@mpage.Name</span>
        </a>
    </li>
}
@if (Model.DisplaySearchMenu | Model.DisplayNewProductsMenu | Model.DisplayCustomerMenu | Model.DisplayBlogMenu | Model.DisplayContactUsMenu)
{
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenu)
    {
        <li>
            <a href="@Url.RouteUrl("NewProducts")">
                <span class="title">@Loc["Products.NewProducts"]</span>
            </a>
        </li>
    }
    @if (Model.DisplaySearchMenu)
    {
        <li>
            <a href="@Url.RouteUrl("ProductSearch")">
                <span class="title">@Loc["Search"]</span>
            </a>
        </li>
    }
    @if (Model.DisplayCustomerMenu)
    {
        <li>
            <a href="@Url.RouteUrl("CustomerInfo")">
                <span class="title">@Loc["Account.MyAccount"]</span>
            </a>
        </li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenu)
    {
        <li>
            <a href="@Url.RouteUrl("Blog")">
                <span class="title">@Loc["Blog"]</span>
            </a>
        </li>
    }
    @if (Model.DisplayContactUsMenu)
    {
        <li>
            <a href="@Url.RouteUrl("ContactUs")">
                <span class="title">@Loc["ContactUs"]</span>
            </a>
        </li>
    }
}
<li class="mt-auto mb-5 other-links flex-column">
    @*<ul class="d-flex flex-column">
        <li class="w-100">*@
            <div class="d-flex justify-content-center">
                @if (!string.IsNullOrEmpty(Loc["menu.contacts.viber.value"]))
                {
                    <div class="mx-2">
                        <a title="viber" href="viber://chat?number=@Loc["menu.contacts.viber.value"]" rel="noopener" target="_blank">
                            <img height="24" width="24" src="/theme/eshop/Content/images/viber.svg" alt="viber" />
                            <span class="sr-only">Viber</span>
                        </a>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Loc["menu.contacts.telegram.value"]))
                {
                    <div class="mx-2">
                        <a title="telegram" href="tg://resolve?domain=@Loc["menu.contacts.telegram.value"]" rel="noopener" target="_blank">
                            <img height="24" width="24" src="/theme/eshop/Content/images/telegram.svg" alt="telegram" />
                            <span class="sr-only">Telegram</span>
                        </a>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Loc["menu.contacts.instagram.value"]))
                {
                    <div class="mx-2">
                        <a href="@Loc["menu.contacts.instagram.value"]" rel="noopener" target="_blank">
                            <img height="24" width="24" src="/theme/eshop/Content/images/instagram.svg" alt="instagram" />
                            <span class="sr-only">instagram</span>
                        </a>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Loc["menu.contacts.email.value"]))
                {
                    <div class="mx-2">
                        <a title="mail" href="mailto:@Loc["menu.contacts.email.value"]" rel="noopener" target="_blank">
                            <img height="24" width="24" src="/theme/eshop/Content/images/mail.svg" alt="mail" />
                            <span class="sr-only">Mail</span>
                        </a>
                    </div>
                }
            </div>
        @*</li>
    </ul>*@
</li>

@await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })

@{
    var rootCategoriesResponsive = Model.Categories.ToList();
    //name it "Categories" if we have only categories. Otherwise, "Menu"
    var responsiveMenuTitle = (rootCategoriesResponsive.Any() && Model.Pages.Any()) ? Loc["Categories"] : Loc["Menu"];
}
